import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from config_reader import config
from paarser import get_data_from_last_script, get_price, change_price
import threading
from concurrent.futures import ThreadPoolExecutor

# Enable logging to capture important messages
logging.basicConfig(level=logging.INFO)

check_prices_lock = threading.Lock()

# Initialize ThreadPoolExecutor
executor = ThreadPoolExecutor(max_workers=1)

# Create the bot and dispatcher
bot = Bot(token='8053355193:AAHIXLq3hKEfcTPsdTPRZJ_C7k2aR_C9Sgg')
dp = Dispatcher()

# Create inline keyboard buttons
sleep_duration = 180
button_add_item = InlineKeyboardButton(text="üõçÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_item")
button_my_items = InlineKeyboardButton(text="üõí –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤", callback_data="my_items")
button_remove_item = InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="remove_item")
button_help = InlineKeyboardButton(text="üÜò –ü–æ–º–æ—â—å", callback_data="help")
button_change_item = InlineKeyboardButton(text="‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–æ–≤–∞—Ä", callback_data="change_item")

button_login = InlineKeyboardButton(text="üîë –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="log_in")

button_change_first_url = InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É", callback_data="change_first_url")
button_change_second_url = InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ç–æ—Ä—É—é —Å—Å—ã–ª–∫—É", callback_data="change_second_url")
button_change_min_price = InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É", callback_data="change_min_price")
button_change_min_index = InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å", callback_data="change_min_index")
button_change_nothing = InlineKeyboardButton(text="‚ùå –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª", callback_data="change_nothing")

button_go_to_page = InlineKeyboardButton(text="üìÑ –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", callback_data="go_to_page")

menu = InlineKeyboardMarkup(inline_keyboard=[
    [button_add_item],
    [button_change_item],
    [button_my_items],
    [button_remove_item, button_help],   
])

login_menu = InlineKeyboardMarkup(inline_keyboard=[
    [button_login], 
    [button_help],
])

change_item_menu = InlineKeyboardMarkup(inline_keyboard=[
    [button_change_first_url],
    [button_change_second_url],
    [button_change_min_price],
    [button_change_min_index],
    [button_change_nothing],
])

# Greeting message
greet = "–ü—Ä–∏–≤–µ—Ç {name}, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ü–µ–Ω–∞–º–∏ –Ω–∞ [omarket.kz](https://omarket.kz), –¢–æ–ª—å–∫–æ —Ç—Å—Å.... ü§´"

greet_again = "–ü—Ä–∏–≤–µ—Ç –µ—â–µ —Ä–∞–∑ {name}, —è –≤—Å—ë —Ç–æ—Ç –∂–µ –±–æ—Ç, –∞ –Ω–∏–∂–µ –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —è —É–º–µ—é üßë‚Äçüíª:"

# Dictionaries to hold user data and state
user_items = {}
user_states = {}
user_login_status = {}
pagination_data = {}
user_sleep_durations = {}


def item_exists(user_id, url):
    items = user_items.get(user_id, [])
    return any(url in [item['first_url'], item['second_url']] for item in items)

@dp.message(Command("start"))
async def cmd_start(message: Message):
    formatted_greet = greet.format(name=message.from_user.full_name)
    markup = login_menu
    user_id = message.from_user.id
    if user_id in user_login_status:
        markup = menu
    else:
        markup = login_menu
    await message.answer(formatted_greet, parse_mode='Markdown', reply_markup=markup)

@dp.message(Command("commands"))
async def cmd_start(message: Message):
    formatted_greet = greet_again.format(name=message.from_user.full_name)
    user_id = message.from_user.id
    if user_id in user_login_status:
        await message.answer(formatted_greet, parse_mode='Markdown', reply_markup=menu)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç:", reply_markup=login_menu)

async def start_change_process(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id]["step"] = "waiting_for_change_selection"
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=change_item_menu)

async def show_items(user_id: int, page: int = 0, search_query: str = None):
    items = user_items.get(user_id, [])
    if search_query:
        items = [item for item in items if search_query.lower() in item['first_url'].lower() or search_query.lower() in item['second_url'].lower()]

    pagination_data[user_id] = {
        'page': page,
        'search_query': search_query,
        'items': items
    }

    items_to_display = items[page * 3: (page + 1) * 3]
    if not items_to_display:
        await bot.send_message(user_id, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    item_list = "\n".join([f"{i + 1 + page * 3}. –ü–µ—Ä–≤—ã–π URL: {item['first_url']}\n"
                           f"–í—Ç–æ—Ä–æ–π URL: {item['second_url']}\n"
                           f"–¶–µ–Ω–∞: {item['price']}\n"
                           f"–í–∞—à–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {item['min_price']}\n"
                           f"–ü–æ—Ä–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {item['porog']}\n"
                           f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {item.get('min_index', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                           for i, item in enumerate(items_to_display)])

    navigation_buttons = []
    total_pages = (len(items) - 1) // 3 + 1
    if page > 0:
        navigation_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{user_id}"))
        navigation_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data=f"do_nothing"))    

    if len(items) > (page + 1) * 3:
        navigation_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"next_{user_id}"))

    if navigation_buttons:
        navigation_markup = InlineKeyboardMarkup(inline_keyboard=[navigation_buttons, [button_go_to_page]])
        await bot.send_message(user_id, f"–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n{item_list}", reply_markup=navigation_markup)
    else:
        await bot.send_message(user_id, f"–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n{item_list}")

@dp.callback_query(lambda c: c.data == "do_nothing")
async def do_nothing_callback(callback_query: types.CallbackQuery):
    pass

@dp.callback_query(lambda c: c.data.startswith('next_'))
async def next_page(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    page = pagination_data[user_id]['page'] + 1
    search_query = pagination_data[user_id]['search_query']
    await callback_query.message.delete()
    await show_items(user_id, page, search_query)

@dp.callback_query(lambda c: c.data.startswith('prev_'))
async def prev_page(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    page = pagination_data[user_id]['page'] - 1
    search_query = pagination_data[user_id]['search_query']
    await callback_query.message.delete()
    await show_items(user_id, page, search_query)

@dp.callback_query(lambda c: c.data == "go_to_page")
async def go_to_page_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_states[user_id] = {"step": "awaiting_page_number"}
    await callback_query.message.delete()
    await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏:")

@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data

    try:
        await callback_query.message.edit_reply_markup(reply_markup=None)
    except:
        pass

    if data == "log_in":
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ Omarket:")
        user_states[user_id] = {"step": "waiting_for_account"}

    elif data == "change_first_url":
        await bot.answer_callback_query(callback_query.id)  # Acknowledge the callback
        await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É:")
        user_states[user_id]["step"] = "waiting_for_new_first_url"

    elif data == "change_second_url":
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤—Ç–æ—Ä—É—é —Å—Å—ã–ª–∫—É:")
        user_states[user_id]["step"] = "waiting_for_new_second_url"

    elif data == "change_min_price":
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:")
        user_states[user_id]["step"] = "waiting_for_new_min_price"

    elif data == "change_min_index":
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å:")
        user_states[user_id]["step"] = "waiting_for_new_min_index"

    elif data == "change_nothing":
        message = "–•–æ—Ä–æ—à–æ {name}, —Ö–æ—Ç—å —è –∏ —Ä–æ–±–æ—Ç, —è –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è üíÅ‚Äç‚ôÇÔ∏è. –ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —è –µ—â–µ –º–æ–≥—É —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å...".format(name=message.from_user.full_name)
        await bot.send_message(user_id, message, parse_mode='Markdown', reply_markup=menu)

    elif data == "help":
        await callback_query.message.answer(
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ü–µ–Ω–∞–º–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ Omarket.\n\n"
            "–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n"
            "/commands - –ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å @nurba_zh –¥–ª—è –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
        )
    
    elif user_login_status.get(user_id):
        if data == "add_item":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É = URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞:")
            user_states[user_id] = {"step": "waiting_for_first_url"}
        elif data == "my_items":
            items = user_items.get(user_id, [])
            if items:
                await show_items(user_id=user_id, page=0, search_query='')
            else:
                await callback_query.message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç üòî.", reply_markup=menu)
        elif data == "remove_item":
            items = user_items.get(user_id, [])
            if items:
                await show_items(user_id=user_id, page=0, search_query='')
                await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n")
                user_states[user_id] = {"step": "waiting_for_remove_index"}
            else:
                await callback_query.message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç üòî.", reply_markup=menu)
        elif data == "change_item":
            items = user_items.get(user_id, [])
            if items:
                await show_items(user_id=user_id, page=0, search_query='')
                await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –æ–¥–Ω—É –∏–∑ –¥–≤—É—Ö —Å—Å—ã–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n")
                user_states[user_id] = {"step": "waiting_for_change_item_selection"}
            else:
                await callback_query.message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç üòî.", reply_markup=menu)

        await callback_query.answer()


@dp.message(Command("time"))
async def set_sleep_time(message: Message):
    user_id = message.from_user.id
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '5' –¥–ª—è 5 —Å–µ–∫—É–Ω–¥):")
    user_states[user_id] = {"step": "waiting_for_sleep_duration"}
 
@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    if user_id in user_states:
        state = user_states[user_id]
        
        if state["step"] == "awaiting_page_number":
            page_input = message.text.strip()

            if page_input.isdigit():
                page_number = int(page_input) - 1
                items = user_items.get(user_id, [])
                
                if 0 <= page_number <= (len(items) // 3):
                    await message.delete()
                    await show_items(user_id, page=page_number)
                else:
                    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
            else:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")

            user_states.pop(user_id)

        if "last_message" not in state:
            state["last_message"] = None

        if state["step"] == "waiting_for_account":
            user_states[user_id]["account"] = message.text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ø–µ—Ä—å –≤–∞—à –ø–∞—Ä–æ–ª—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üôàüôàüôà:")
            state["step"] = "waiting_for_password"
        
        elif state["step"] == "waiting_for_password":
            user_states[user_id]["password"] = message.text
            await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å–æ –≤—Ö–æ–¥–æ–º –≤ –∞–∫–∫–∞—É–Ω—Ç!", reply_markup=menu)
            user_login_status[user_id] = {"account": user_states[user_id]["account"], "password": user_states[user_id]["password"]}  
            user_states.pop(user_id)

        if state["step"] == "waiting_for_first_url":
            first_url = message.text
            if item_exists(user_id, first_url):
                await message.answer("–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.")
                state["step"] = ""
                return
            state["first_url"] = first_url
            last_message = await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é —Å—Å—ã–ª–∫—É = URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ (P.S: –≥–¥–µ –µ—Å—Ç—å –ø–æ—Ä–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞):")
            state["last_message"] = last_message 
            state["step"] = "waiting_for_second_url"  # Move to the next state
            
        elif state["step"] == "waiting_for_second_url":
            second_url = message.text
            if item_exists(user_id, second_url):
                await message.answer("–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.")
                state["step"] = ""
                return
            state["second_url"] = second_url
            if state["last_message"]:
                await state["last_message"].delete()
            last_message = await message.answer("–ê–≥–∞, –∑–∞–ø–∏—Å–∞–ª. –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ç–æ–≤–∞—Ä! –ê —Ç–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ú–ò–ù–ò–ú–ê–õ–¨–ù–£–Æ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø—Ä–æ–¥–∞–≤–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç–µ. –ú—ã –∂–µ –≤—Å–µ —Ç–∞–∫–∏ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å üíµ:")
            state["last_message"] = last_message
            state["step"] = "waiting_for_min_price"  # Move to the next state
        
        elif state["step"] == "waiting_for_min_price":
            try:
                state["min_price"] = int(message.text)
                if state["last_message"]:
                    await state["last_message"].delete()
                last_message = await message.answer("–£ –∫–∞–∫–æ–≥–æ –ø–æ —Å—á–µ—Ç—É –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å–º–æ—Ç—Ä–µ—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É? <i>(–æ–±—ã—á–Ω–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π, –Ω–æ –≤–¥—Ä—É–≥ —Ç—É—Ç —á–µ–ª –±—É–¥–µ—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∑–∞ 5 —Ç–≥, –∏ —Å –Ω–∏–º –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –±–æ—Ä–æ—Ç—å—Å—è):</i>", parse_mode='HTML')
                state["last_message"] = last_message
                state["step"] = "waiting_for_minimal_index"  # Move to the next state
            except ValueError:
                state["last_message"] = None
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")
                
        elif state["step"] == "waiting_for_minimal_index":
            try:
                state["min_index"] = int(message.text)
                
                if state["last_message"] and state["last_message"] != None:
                    await state["last_message"].delete()
                else:
                    print("nothing")    

                loading_message = await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω—ã... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ 5 —Å–µ–∫—É–Ω–¥. ‚è≥")
                
                price_and_porog = get_data_from_last_script(
                    user_login_status[user_id]["account"],
                    user_login_status[user_id]["password"],
                    state["second_url"], state["first_url"], 
                    state["min_index"]
                )
                 
                if user_id not in user_items:
                    user_items[user_id] = []
                
                await loading_message.delete()

                user_items[user_id].append({
                    "first_url": state["first_url"], 
                    "second_url": state["second_url"], 
                    "min_price": int(state["min_price"]), 
                    "min_price_possible": int(price_and_porog["–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞"]) + 1, 
                    "price": int(price_and_porog["–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞"]), 
                    "porog": price_and_porog["–ü–æ—Ä–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"], 
                    "min_index": state["min_index"],
                })
                
                await message.answer(f"–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω. \n–ü–µ—Ä–≤—ã–π URL: {state['first_url']}\n" 
                    + f"–í—Ç–æ—Ä–æ–π URL: {state['second_url']}\n" 
                    + f"–í–∞—à–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {state['min_price']}\n"
                    + f"–¶–µ–Ω–∞: {price_and_porog['–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞']}\n"
                    + f"–ü–æ—Ä–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {price_and_porog['–ü–æ—Ä–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞']}\n"
                    + f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {state.get('min_index', '–ù–µ —É–∫–∞–∑–∞–Ω')}", reply_markup=menu)
                user_states.pop(user_id) 
                
            except ValueError:
                state["last_message"] = None
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–¥–∞–≤—Ü–∞ (—á–∏—Å–ª–æ).")
                
        elif state["step"] == "waiting_for_change_index":
            try:
                index = int(message.text) - 1
                items = user_items.get(user_id, [])
                if 0 <= index < len(items):
                    shown_item = items[index]
                    await message.answer(f"–í–æ—Ç –≤–∞—à —Ç–æ–≤–∞—Ä. \n–ü–µ—Ä–≤—ã–π URL: {shown_item['first_url']}\n" 
                    + f"–í—Ç–æ—Ä–æ–π URL: {shown_item['second_url']}\n" 
                    + f"–í–∞—à–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {shown_item['min_price']}\n"
                    + f"–ü–æ—Ä–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {shown_item['porog']}\n"
                    + f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {shown_item.get('min_index', '–ù–µ —É–∫–∞–∑–∞–Ω')}", reply_markup=menu)
                else:
                    await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                user_states.pop(user_id)  # Clear state after handling change
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")
                
        elif state["step"] == "waiting_for_remove_index":
            try:
                index = int(message.text) - 1
                items = user_items.get(user_id, [])
                if 0 <= index < len(items):
                    removed_item = items.pop(index)
                    await message.answer(f"–ü–æ–ø—Ä–æ—â–∞–π—Ç–µ—Å—å —Å —Ç–æ–≤–∞—Ä–æ–º –Ω–∏–∂–µ, –≤—ã –µ–≥–æ —É–¥–∞–ª–∏–ª–∏ üíÄ. \n–ü–µ—Ä–≤—ã–π URL: {removed_item['first_url']}\n" 
                    + f"–í—Ç–æ—Ä–æ–π URL: {removed_item['second_url']}\n" 
                    + f"–í–∞—à–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {removed_item['min_price']}\n"
                    + f"–ü–æ—Ä–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {removed_item['porog']}\n"
                    + f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {removed_item.get('min_index', '–ù–µ —É–∫–∞–∑–∞–Ω')}", reply_markup=menu)
                else:
                    await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                user_states.pop(user_id)  # Clear state after handling remove
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")

        if state["step"] == "waiting_for_change_item_selection":
            items = user_items.get(user_id, [])
            user_input = message.text

            # Try to match by URL first
            selected_item = next((item for item in items if item["first_url"] == user_input or item["second_url"] == user_input), None)
            
            # If not matched by URL, try by index number
            if selected_item is None:
                try:
                    index = int(user_input) - 1
                    if 0 <= index < len(items):
                        selected_item_index = index
                    else:
                        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                        return
                except ValueError:
                    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")
                    return

            state['last_selected_index'] = selected_item_index
            await start_change_process(message)  
        
        # Process changes for each selected field
        elif state["step"] == "waiting_for_new_first_url":
            last_selected_index = state.get('last_selected_index')
            user_items[user_id][last_selected_index]["first_url"] = message.text
            await message.answer("–ü–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=menu)
            user_states.pop(user_id)

        elif state["step"] == "waiting_for_new_second_url":
            last_selected_index = state.get('last_selected_index')
            user_items[user_id][last_selected_index]["second_url"] = message.text
            await message.answer("–í—Ç–æ—Ä–∞—è —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=menu)
            user_states.pop(user_id)

        elif state["step"] == "waiting_for_new_min_price":
            try:
                new_price = int(message.text)
                last_selected_index = state.get('last_selected_index')
                user_items[user_id][last_selected_index]["min_price"] = new_price
                await message.answer(f"–í–∞—à–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_price}!", reply_markup=menu)
                user_states.pop(user_id)
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã.")

        elif state["step"] == "waiting_for_new_min_index":
            try:
                new_index = int(message.text)
                last_selected_index = state.get('last_selected_index')
                user_items[user_id][last_selected_index]["min_index"] = new_index
                await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {new_index}!", reply_markup=menu)
                user_states.pop(user_id)
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞.")  

        if state["step"] == "waiting_for_sleep_duration":
            try:
                # Get the user-defined sleep duration
                sleep_duration = int(message.text.strip())
                user_sleep_durations[user_id] = sleep_duration
                await message.answer(f"–í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {sleep_duration} —Å–µ–∫—É–Ω–¥.")
                user_states.pop(user_id)
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).")
              
    else:
        markup = login_menu
        user_id = message.from_user.id
        if user_id in user_login_status:
            markup = menu
        else:
            markup = login_menu
        await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π.", reply_markup=markup)

async def check_prices():
    while True:
        counter = 0
        print(user_id, items)
        for user_id, items in user_items.items():
            for item in items:
                if counter%10 == 0:
                    print(counter, "\n")
                current_price = get_price(
                    user_login_status[user_id]["account"], 
                    user_login_status[user_id]["password"], 
                    item["second_url"], 
                    item["first_url"], 
                    item["min_index"]
                )
                counter += 1
                if isinstance(current_price, (int, float)) and current_price < item["min_price_possible"]:
                    if (current_price - 1 < item["min_price"]):
                        await bot.send_message(user_id, f"–¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä {item['first_url']} —Å–Ω–∏–∑–∏–ª–∞—Å—å –¥–æ {current_price}! –Ω–æ –æ–Ω–∞ –Ω–∏–∂–µ, —á–µ–º –Ω–∞—à–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞, –∏ —è –Ω–µ –±—É–¥—É –æ–±–Ω–æ–≤–ª—è—Ç—å –µ–µ")
                        item["min_price_possible"] = current_price
                    else:
                        change_price(user_login_status[user_id]["account"], user_login_status[user_id]["password"], item["second_url"], current_price - 1)
                        if isinstance(item["porog"], (int, float)) and current_price - 1 < int(item["porog"]):
                            await bot.send_message(user_id, f"–¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä {item['first_url']} —Å–Ω–∏–∑–∏–ª–∞—Å—å –¥–æ {current_price}! –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –Ω–∞ {current_price - 1}. –ù–û –û–ù–ê –ù–ò–ñ–ï –ü–û–†–û–ì–û–í–û–ô - {item['porog']}")
                            item["min_price_possible"] = current_price - 1 
                        else:  
                            await bot.send_message(user_id, f"–¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä {item['first_url']} —Å–Ω–∏–∑–∏–ª–∞—Å—å –¥–æ {current_price}! –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –Ω–∞ {current_price - 1}.")
                            item["min_price_possible"] = current_price - 1 
                # elif isinstance(current_price, (int, float)) and current_price > item["min_price_possible"]:    
                #     print('here2')
                #     if (item["min_price"] - current_price > 0):
                #         await bot.send_message(user_id, f"–¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä {item['first_url']} –ø–æ–¥–Ω—è–ª–∞—Å—å –¥–æ {current_price}! –Ω–æ –æ–Ω–∞ –Ω–∏–∂–µ, —á–µ–º –Ω–∞—à–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞, –∏ —è –Ω–µ –±—É–¥—É –æ–±–Ω–æ–≤–ª—è—Ç—å –µ–µ")
                #         item["min_price_possible"] = current_price
                #     elif (item["min_price"] - current_price < 0):
                #         if isinstance(item["porog"], (int, float)) and current_price - 1 < int(item["porog"]):
                #             await bot.send_message(user_id, f"–¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä {item['first_url']} –ø–æ–¥–Ω—è–ª–∞—Å—å –¥–æ {current_price}! –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –Ω–∞ {current_price - 1}. –ù–û –û–ù–ê –ù–ò–ñ–ï –ü–û–†–û–ì–û–í–û–ô - {item['porog']}")
                #             item["min_price_possible"] = current_price - 1 
                #         else:    
                #             await bot.send_message(user_id, f"–¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä {item['first_url']} –ø–æ–¥–Ω—è–ª–∞—Å—å –¥–æ {current_price}! –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –Ω–∞ {current_price - 1}.")
                #             item["min_price_possible"] = current_price - 1 

        new_sleep_duration = user_sleep_durations.get(user_id, sleep_duration)
        await asyncio.sleep(new_sleep_duration)


def start_check_prices():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(check_prices())
    loop.close()

async def main():
    executor.submit(start_check_prices)
    # Start the bot polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
