import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from config_reader import config
from paarser import get_data_from_last_script, get_price

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token='8053355193:AAHIXLq3hKEfcTPsdTPRZJ_C7k2aR_C9Sgg')
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

button_add_item = InlineKeyboardButton(text="üõçÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_item")
button_my_items = InlineKeyboardButton(text="üõí  –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤", callback_data="my_items")
button_remove_item = InlineKeyboardButton(text="üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="remove_item")
button_help = InlineKeyboardButton(text="üÜò  –ü–æ–º–æ—â—å", callback_data="help")
button_change_item = InlineKeyboardButton(text="‚úèÔ∏è  –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–æ–≤–∞—Ä", callback_data="help")

menu = InlineKeyboardMarkup(inline_keyboard=[
    [button_add_item],
    [button_change_item],
    [button_my_items],
    [button_remove_item, button_help],   
])
user_items = {}
user_states = {}
price_check_task = None

greet = "–ü—Ä–∏–≤–µ—Ç, {name}, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ü–µ–Ω–∞–º–∏ –Ω–∞ [omarket.kz](https://omarket.kz), –¢–æ–ª—å–∫–æ —Ç—Å—Å.... ü§´"

@dp.message(Command("start"))
async def cmd_hello(message: Message):
    formatted_greet = greet.format(name=message.from_user.full_name)
    await message.answer(formatted_greet, parse_mode='Markdown', reply_markup=menu)

@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data

    if data == "add_item":
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É = URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞:")
        user_states[user_id] = {"step": "waiting_for_first_url"}
    elif data == "my_items":
        items = user_items.get(user_id, [])
        if items:
            item_list = "\n".join([f"{i+1}. {item['first_url']} - {item['price']}" for i, item in enumerate(items)])
            await callback_query.message.answer("–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n" + item_list)
        else:
            await callback_query.message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç")
    elif data == "remove_item":
        items = user_items.get(user_id, [])
        if items:
            item_list = "\n".join([f"{i+1}. {item['first_url']} - {item['price']}" for i, item in enumerate(items)])
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n" + item_list)
            user_states[user_id] = {"step": "waiting_for_remove_index"}
        else:
            await callback_query.message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç")
    elif data == "change_item":
        items = user_items.get(user_id, [])
        if items:
            item_list = "\n".join([f"{i+1}. {item['first_url']} - {item['price']}" for i, item in enumerate(items)])
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:\n" + item_list)
            user_states[user_id] = {"step": "waiting_for_change_index"}
        else:
            await callback_query.message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç")        
    elif data == "help":
        await callback_query.message.answer("–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ü–µ–Ω–∞–º–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ Omarket.\n\n"
                                            "–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                                            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                                            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n"
                                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
                                            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å @nurba_zh –¥–ª—è –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")

    await callback_query.answer()  # Acknowledge the callback query to stop repeating

@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    if user_id in user_states:
        state = user_states[user_id]
        if state["step"] == "waiting_for_url":
            state["first_url"] = message.text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é —Å—Å—ã–ª–∫—É = URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞(P.S: –≥–¥–µ –µ—Å—Ç—å –ø–æ—Ä–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞):")
        elif state["step"] == "waiting_for_price":
            state["second_url"] = message.text
            await message.answer("–ê–≥–∞, –∑–∞–ø–∏—Å–∞–ª. –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ç–æ–≤–∞—Ä! –ê —Ç–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ú–ò–ù–ò–ú–ê–õ–¨–ù–£–Æ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø—Ä–æ–¥–∞–≤–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç–µ. –ú—ã –∂–µ –≤—Å–µ —Ç–∞–∫–∏ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å üíµ:")
        elif state["step"] == "waiting_for_price":
            try:
                state["min_price"] = float(message.text)
                await message.answer("–£ –∫–∞–∫–æ–≥–æ –ø–æ —Å—á–µ—Ç—É –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å–º–æ—Ç—Ä–µ—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É? <i>(–æ–±—ã—á–Ω–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π, –Ω–æ –≤–¥—Ä—É–≥ —Ç—É—Ç —á–µ–ª –±—É–¥–µ—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∑–∞ 5—Ç–≥, –∏ —Å –Ω–∏–º –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –±–æ—Ä–æ—Ç—å—Å—è):<i>", parse_mode='Markdown')
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")
        elif state["step"] == "waiting_for_minimal_index":
            try:
                min_index = float(message.text)
                price = get_price(state["first_url"], state["second_url"], min_index)
                if user_id not in user_items:
                    user_items[user_id] = []
                user_items[user_id].append({
                    "first_url": state["first_url"], 
                    "second_url": state["second_url"], 
                    "min_price": state["min_price"], 
                    "price": price, 
                    "min_index": min_index,
                    })
                await message.answer(f"–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {state['first_url']} - {price}", reply_markup=menu)
                user_states.pop(user_id) 
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –Ω–æ–º–µ—Ä –ø—Ä–æ–¥–∞–≤—Ü–∞(–ß–ò–°–õ–û–û–û–û).1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£")
        elif state["step"] == "waiting_for_change_index":
            try:
                index = int(message.text) - 1
                items = user_items.get(user_id, [])
                if 0 <= index < len(items):
                    shown_item = items[index]
                    await message.answer(f"–í–æ—Ç –≤–∞—à —Ç–æ–≤–∞—Ä: {shown_item['first_url']} - {shown_item['price']}", reply_markup=menu)
                else:
                    await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                user_states.pop(user_id)
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")     
        elif state["step"] == "waiting_for_remove_index":
            try:
                index = int(message.text) - 1
                items = user_items.get(user_id, [])
                if 0 <= index < len(items):
                    removed_item = items.pop(index)
                    await message.answer(f"–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω: {removed_item['first_url']} - {removed_item['price']}", reply_markup=menu)
                else:
                    await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                user_states.pop(user_id)
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")
    else:
        await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π.", reply_markup=menu)

async def check_prices():
    while True:
        for user_id, items in user_items.items():
            for item in items:
                current_price = get_data_from_last_script(item["url"], item["url"], 1)
                if isinstance(current_price, (int, float)) and current_price < item["price"]:
                    await bot.send_message(user_id, f"–¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä {item['first_url']} —Å–Ω–∏–∑–∏–ª–∞—Å—å –¥–æ {current_price}! –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –Ω–∞ {current_price - 1}!.")
                    item["price"] = current_price - 1 
        await asyncio.sleep(10)

async def main():
    #global price_check_task
    #price_check_task = asyncio.create_task(check_prices())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
